#!/usr/bin/env python3

# This tool is used to generate a UOM lookup table for ZUGFeRD/Factur-X in Dokos/ERPNext.
# It is based on the following source:
# https://unece.org/trade/uncefact/cl-recommendations - Rec 20 – Codes for Units of Measure Used in International Trade
# Recommendation N°. 20 - Revision 17 (Annexes I to III) in English
# rec20_Rev17e-2021.xlsx

# The output is a Python file named "zugferd_uoms.py" in the directory where this script is located.

COMPRESSED = True

if __name__ != "__main__":
	raise ImportError("This script can only be run directly.")


# Define constants.
DOWNLOAD_URL = "https://unece.org/sites/default/files/2021-06/rec20_Rev17e-2021.xlsx"
DOWNLOADED_FILE_NAME = "tmp_downloaded_uoms.xlsx"
SHEET_NAMES = ["Annex I", "Annex II & Annex III"]
COLUMN_NAME = "Name"
COLUMN_CODE = "Common Code"


# Change the current working directory to the directory where this script is located.
import os

os.chdir(os.path.dirname(os.path.realpath(__file__)))


# Check if the XLSX file exists.
if os.path.isfile(DOWNLOADED_FILE_NAME):
	print("File '{}' already exists, downloading again".format(DOWNLOADED_FILE_NAME))
	os.remove(DOWNLOADED_FILE_NAME)


# Download the XLSX file.
import requests

print("Downloading '{}'".format(DOWNLOAD_URL))
response = requests.get(DOWNLOAD_URL)
with open(DOWNLOADED_FILE_NAME, "wb") as file:
	file.write(response.content)


# Parse the XLSX file.
import openpyxl

print("Parsing '{}'".format(DOWNLOADED_FILE_NAME))
workbook = openpyxl.load_workbook(DOWNLOADED_FILE_NAME, read_only=True, data_only=True)

uom_map: dict[str, str] = {}
for sheet_name in SHEET_NAMES:
	sheet = workbook.get_sheet_by_name(sheet_name)

	rows = sheet.rows  # create a generator
	header_row = next(rows)
	column_map = {
		str(cell.value).replace("\n", " "): idx for idx, cell in enumerate(header_row) if cell.value
	}

	for row in rows:
		name: str = row[column_map[COLUMN_NAME]].value.strip()  # type: ignore
		code: str = row[column_map[COLUMN_CODE]].value.strip()  # type: ignore
		uom_map[name] = code

print("Found {} UOMs".format(len(uom_map)))

if COMPRESSED:
	print("Generating LZMA-compressed JSON file")

	import json
	import lzma

	generated_json = json.dumps(uom_map).encode("utf-8")
	generated_json_compressed = lzma.compress(generated_json)

	# Write the LZMA-compressed JSON file.
	with open("../common/uom_map.json.xz", "wb") as file:
		file.write(generated_json_compressed)

	print("Generating Python code")

	generated_python_code = (
		"""
# This file was generated by the script "generate_uoms.py" in the same directory.
# It contains a lookup table for UOMs used in ZUGFeRD/Factur-X.

import json
import lzma
import os

# Load the UOM map from the LZMA-compressed JSON file.
with open(
	os.path.join(os.path.dirname(os.path.realpath(__file__)), "uom_map.json.xz"), "rb"
) as file:
	uom_map = json.loads(lzma.decompress(file.read()).decode("utf-8"))

fallback_code = "C62"
	""".strip()
		+ "\n"
	)
else:
	print("Generating Python code")

	generated_python_code = (
		f"""
# This file was generated by the script "generate_uoms.py" in the same directory.
# It contains a lookup table for UOMs used in ZUGFeRD/Factur-X.

uom_map = {uom_map!r}
fallback_code = "C62"
	""".strip()
		+ "\n"
	)

# Write the Python file.
with open("../common/uom_map.py", "w") as file:
	file.write(generated_python_code)


# Remove the downloaded XLSX file.
os.remove(DOWNLOADED_FILE_NAME)


print()
print("Done")
